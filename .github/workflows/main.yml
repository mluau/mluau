name: CI
on: [push, pull_request]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, nightly]
        lua: [lua54, lua53, lua52, lua51, luajit, luajit52, luau, luau-jit, luau-vector4]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@main
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Run ${{ matrix.lua }} tests
        run: |
          cargo test --no-default-features --features "${{ matrix.lua }},vendored"
          cargo test --no-default-features --features "${{ matrix.lua }},vendored,serde,macros,anyhow,userdata-wrappers"
          cargo test --no-default-features --features "${{ matrix.lua }},vendored,serde,macros,anyhow,userdata-wrappers,send"
        shell: bash
      - name: Run compile tests (macos lua54)
        if: ${{ matrix.os == 'macos-latest' && matrix.lua == 'lua54' }}
        run: |
          TRYBUILD=overwrite cargo test --no-default-features --features "${{ matrix.lua }},vendored" --tests -- --ignored
          TRYBUILD=overwrite cargo test --no-default-features --features "${{ matrix.lua }},vendored,send,serde,macros" --tests -- --ignored
        shell: bash

  test_lute:
    name: Test Lute
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable, nightly]
        lua: [luau-lute-prebuilt]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@main
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Run ${{ matrix.lua }} tests
        run: |
          cargo test --no-default-features --features "${{ matrix.lua }},vendored" --release
          cargo test --no-default-features --features "${{ matrix.lua }},vendored,serde,macros,anyhow,userdata-wrappers" --release 
          cargo test --no-default-features --features "${{ matrix.lua }},vendored,serde,macros,anyhow,userdata-wrappers,send" --release
        shell: bash

  test_with_sanitizer:
    name: Test with address sanitizer
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [nightly]
        lua: [lua54, lua53, lua52, lua51, luajit, luau, luau-jit, luau-vector4]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@main
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Run ${{ matrix.lua }} tests with address sanitizer
        run: |
          cargo test --no-default-features --tests --features "${{ matrix.lua }},vendored,serde,macros,anyhow" --target x86_64-unknown-linux-gnu -- --skip test_too_many_recursions
          cargo test --no-default-features --tests --features "${{ matrix.lua }},vendored,serde,macros,anyhow,userdata-wrappers,send" --target x86_64-unknown-linux-gnu -- --skip test_too_many_recursions
        shell: bash
        env:
          RUSTFLAGS: -Z sanitizer=address

  test_with_memory_limit:
    name: Test with memory limit
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [nightly]
        lua: [lua54, lua53, lua52, lua51, luajit, luau, luau-jit, luau-vector4]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@main
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Run ${{ matrix.lua }} tests with forced memory limit
        run: |
          cargo test --no-default-features --tests --features "${{ matrix.lua }},vendored,send,serde,macros,anyhow,userdata-wrappers"
        shell: bash
        env:
          RUSTFLAGS: --cfg=force_memory_limit

  test_modules:
    name: Test modules
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]
        lua: [lua54, lua53, lua52, lua51, luajit]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
    steps:
      - uses: actions/checkout@main
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Run ${{ matrix.lua }} module tests
        run: |
          (cd tests/module && cargo build --no-default-features --release --features "${{ matrix.lua }}")
          (cd tests/module/loader && cargo test --no-default-features --release --features "${{ matrix.lua }},vendored")
        shell: bash

  test_modules_windows:
    name: Test modules on Windows
    runs-on: windows-latest
    strategy:
      matrix:
        lua: [lua54, luajit]
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
      - uses: actions/checkout@main
      - name: Install Rust & Lua
        run: |
          pacman -S --noconfirm mingw-w64-x86_64-rust mingw-w64-x86_64-lua mingw-w64-x86_64-luajit mingw-w64-x86_64-pkg-config
      - name: Run ${{ matrix.lua }} module tests
        run: |
          (cd tests/module && cargo build --no-default-features --release --features "${{ matrix.lua }}")
          (cd tests/module/loader && cargo test --no-default-features --release --features "${{ matrix.lua }}")

  test_wasm32_emscripten:
    name: Test on wasm32-unknown-emscripten
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lua: [lua54, lua53, lua52, lua51, luau]
    steps:
      - uses: actions/checkout@main
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: wasm32-unknown-emscripten
      - name: Install Emscripten
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends emscripten
      - name: Run ${{ matrix.lua }} tests
        run: |
          cargo test --no-default-features --tests --features "${{ matrix.lua }},vendored"
          cargo test --no-default-features --tests --features "${{ matrix.lua }},vendored,serde,macros,anyhow,userdata-wrappers"

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - run: cargo fmt -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lua: [lua54, lua53, lua52, lua51, luajit, luau, luau-jit, luau-vector4]
    steps:
      - uses: actions/checkout@main
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: clippy
      - uses: giraffate/clippy-action@v1
        with:
          reporter: 'github-pr-review'
          clippy_flags: --features "${{ matrix.lua }},vendored,send,serde,macros,anyhow,userdata-wrappers"
